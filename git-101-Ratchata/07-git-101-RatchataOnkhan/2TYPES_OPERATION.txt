# TYPES_OPERATION

## หลักการเขียน
1.นิยามฟังชั่น main( ) 
การนิยาม ชื่อ ตามด้วย ( ),กําหนดmain
ex. show_me( )
 main( ) {}
- ต้องเขียนให้อยู่บรรทัดเดียวกัน
- { }
- ; = เครื่องหมายจบคําสั่ง
- // , /*.........*/= คอมเม้น
- ต้องประกาศประเภทข้อมูลให้อยู่หน้าฟังก์ชั่น
ex. int main( )
{
printf(“hello, word”); //ใช้แสดงข้อความ
}
จะได้ว่า main จะส่งค่า intกลับ
ถ้าไม่มีจะขึ้น warning

**Declaration** = การประกาศนัยๆๆ
#include <stdio.h> = เป็นคําสั่งอ่านข้อมูล เพื่อให้ถูกประมวลผล ถ้าไม่
เขียนจะขึ้น waning
- คําสั่ง puts = การprint str
องคําเป็นพิมใหญ่ ex StudenID, StudentName
3.camelCase = คําเเรกเป็นตัวเล็กเเต่พอคําที่2ตน.เเรกจะเป็นพิมใหญ่
- ประเภทข้อมูล
IEE 754
float -> single 
double -> double
- short ช่วยลดพท.จัดเก็บของจน.เต็ม
ex. Short int = 2 byte

- long ช่วยเพิ่ทพท.เก็บข้อมูล
ex. Long int = บางครั้ง 8 byte
- signed = เก็บค่าที่มีเครื่องหมายส่วนใหญ่เป็นจน.เต็ม
- unsigned = เก็บค่าบวก
ex. signed int = int
- sizeof เป็น operator ในการช็คขนาดตัวแปรข้อมูล
- void = ประเภทข้อมูลที่ไม่ส่งค่ากลับ,ใช้จองพท.ในหน่วยค.ทรงจํา

**ค่าคงที่**
- ค่าที่ตีค.ได้เลย
- ค่าคงที่จน.เต็ม
an integer constant ex. 1234
a long constant = มี l ex. 123456789l, 12345677890L
- รากที่ 2,16,8
0b 0B = ฐาน2
0 = ฐาน8
0x , 0X= ฐาน16
Ex. 037 = ฐาน8
 0x1f = ฐาน16
 0b1001 = ฐาน2
- การprint format ของฐาน8,16
%o = 8
%x = 16
- ค่าคงที่ของอักษร
‘\0’ = null character

- ค่า str
ตัวที่มี “ “ ล้อม
“” = empty string
‘\0\
บวกกันได้ จะเเปลงเป็น ascii

**การประกาศตัวแปร**
- ต้องประกาศไว้ต้น code block
- มีหลายแบบ
ทําบรรทัดเดียว ex. int lower, upper, step; char c, line[1000];
ตั้งเเลัวให้ค่า ex. int lower = 10, upper = 30’
ตั้งเเล้วให้ค่าเป็ฯนิพจน์ ex.char c = ‘A’ + 1;
const = operator ที่ไม่ให้เปลี่ยนค่า
printf( ) , puts ( ) = outputค่าออก
- การพิมfomat

    %d,%i = int

    %f = float

    %c = ตัวอักษร กรณีเป็น int จะดูรหัส ascii

    %% = เเสดง %

    %s = str

    %u = จน.+ ถ้าลบจะเอาไปcomplement

    %o = 8

    %x = 16

    %e = เเสดง floating 
    pointรูปเเบบE (หรือํา)

    %p = ค่าpointer
- character input and output
char input -> getchar( ) เอามาจาก stdin,จะส่งค่าEOFกลับกรณีที่เอาข้อมูล
 เข้าครบ
putchar( ) ส่งค่าออกไป stdout
EOF = ค่าที่กําหนดไว้ใน stdio.h บอกถึงจุดสิ้นสุดของข้อมูล

**ตัวดําเนินการทางคณิต**
- Operator = ตัวดําเนินการ
- Operand = ตัวถูกกระทํา
- +,-,*,/,%
- % ใช้กับ float , double ไม่ได้
- binary operator = ตัวดําเนินการที่ถูกกระทํา 
 2 ตัว

**Comma operator**
- ใช้ปิดคําสั่ง ( ; )
- อาเรย์ = เก็บข้อมูลชนิดเดียวมากกว่า1,มี index กําหนดตน.ข้อมูล
Type Conversion
- เอาค่่าของข้อมูล มาใช้งานผ่านoperator เเละจะมี compiler เเปลงข้อมูลให้
จาก narrow(เต็ม) -> wider(จริง) 

**Type conversion**
- แปลประเภทข้อมูล
- ใช้ type name ex. (int)2.5 -> 2
- สามารถใช้ฟังก์ชั่น isdigit( ) ใด้ เเต่ต้องมี <ctype.h>

**Increment and Decrement operator**
- n++ = +1
- ++n = +1 
- n - - = -1
- --n = -1
#