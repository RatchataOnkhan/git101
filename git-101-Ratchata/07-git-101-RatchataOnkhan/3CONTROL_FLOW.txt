# CONTROL_FLOW

**If-Else**

```
 if (expression)

      statement1

   else 

      statement2
```

**Else-If**
- ถ้า expression ตัวไหนมีค่าเป็นจริง statement ที่เกี่ยวข้องก็จะถูกทำงาน
```
 if (expression1)

      statement1

   else if (expression2)

      statement2

   else if (expression3)

      statement3

   else if (expression4)

      statement4

   else

      statement5
```

**For loop**
``` C
 for (expr1; expr2; expr3)

       statement


```

**Switch**
 
 ใช้ในการตรวจสอบเงื่อนไขในลักษณะที่ดูว่าค่าของ expression นั้น match เข้ากับค่าคงที่ ตัวใด หลังจากนั้นโปรแกรมจะกระโดดมาทำงาน statement ภายใต้ค่าคงที่นั้นลงมาเรื่อยๆ จนกว่าจะเจอ break แล้วจึงหลุดออกจาก switch Ex.
 ```
switch (expression) {

      case const-expr: 

         statements

      case const-expr:

         statements

      default: 

         statements

   }
 ```
 
 **While**
  ```
  expr1;

    while (expr2) {

       statement

       expr3;

    }
```

**Loops - Do-While**

- do-while จะแตกต่างจาก while และ for ในแง่ที่การทดสอบเงื่อนไขจะอยู่ด้านล่างของลูป
```
do

       statement

    while (expression);



    ซึ่งส่วนใหญ่เรามักจะเห็นในรูปนี้



    do {

       statement

    } while (expression);
```

**Break และ Continue**
- break และ continue จะช่วยโปรแกรมเมอร์ให้สามารถควบคุมการวนซ้ำได้มากขึ้น
- break จะทำให้โปรแกรมหลุดออกมาจากลูป for, while และ do-while โดยทันที ทั้งนี้การหลุดจากลูปจะทำจากลูปวงในสุดที่ break อยู่
#