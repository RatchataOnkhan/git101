# POINTER_DYNAMIC
**pointer**
พอนย์เตอร์ (pointer) คือตัวแปรที่เก็บค่าของที่อยู่ของข้อมูลของตัวแปร การใช้พอนย์เตอร์จะทำให้เราสามารถเข้าถึงข้อมูลได้โดยตรงโดยใช้ที่อยู่ของหน่วยความจำ แทนที่จะใช้ชื่อของตัวแปร  มีเครื่องหมายที่สำคัญที่คุณต้องรู้เกี่ยวกับพอนย์เตอร์

- Address-of operator (&)
- Dereference operator (*)
- Declaration operator (*)

**Address-of operator (&)**

**การใส่สัญลักษณ์ ampersand (&)**หน้าตัวแปรนั้นจะทำให้เราได้รับค่าที่อยู่ของตัวแปรในหน่วยความจำ ที่อยู่นี้สามารถได้รับมาได้ในตอนที่โปรแกรมรันเท่านั้น

ตัวอย่าง : 
```
int myVariable = 8;
printf("%d", &myVariable);
```
**Dereference operator (*)**

เราใช้จะใช้เครื่องหมาย star * หน้าตัวแปรพอยน์เตอร์เพื่อเข้าถึงข้อมูลในที่อยู่ของพอยน์เตอร์
```
int myVariable = 8;
int *myPointer = &myVariable; // ประกาศตัวแปรพอนย์เตอร์
printf("%d", *myPointer); // เข้าถึงข้อมูลของตัวแปรพอนย์เตอร์
```

**Declaring pointers**
หลังอยากที่ได้รู้จักพอยน์เตอร์แล้ว ต่อไปจะเป็นการประกาศตัวแปรพอยน์เตอร์เพื่อใช้งาน ในการประกาศตัวแปรพอนย์เตอร์ เราจะใช้เครื่องหมาย star (*) เช่นเดียวกับการเข้าถึงค่าของตัวแปร ดังนั้นโปรดอย่าสับสนในตรงนี้ มาดูตัวอย่างในการประกาศตัวแปร

```
#include <stdio.h>

int main()
{
    int number = 10;
    float money = 34.8;

    int *p1 = &number;
    float *p2;
    p2 = &money;

    printf("p1 address = %x\n", p1);
    printf("p1 value = %d\n", *p1);
    printf("p2 address = %x\n", p2);
    printf("p2 value = %f\n", *p2);
    return 0;
}
```

**การใช้พอนย์เตอร์กับอาเรย์**

การใช้พอยน์เตอร์กับอาเรย์นั้นมีประโยชน์ เพราะอาเรย์เป็นการเก็บข้อมูลแบบชุดอันดับ และเรียงต่อกัน

```
#include <stdio.h>
int main()
{
    int number[5] = {10, 20, 30, 40, 50};
    int *myPointer = &number;
    printf("first -> %d\n", *myPointer);
    myPointer++;
    printf("go next -> %d\n", *myPointer);
    myPointer += 3;
    printf("go next 3 -> %d\n", *myPointer);
    myPointer--;
    printf("go back -> %d\n", *myPointer);
    return 0;
}
```

**Pointer arithmetics**
พอนย์เตอร์เป็นตัวแปร ดังนั้นเราสามารถใช้การดำเนินการทางคณิตศาสตร์กับพอยน์เตอร์เช่นเดียวกับตัวแปรได้ แต่สำหรับพอยน์เตอร์แล้วจะเป็นการทำงานกับที่อยู่ของหน่วยความจำแทน ยกตัวอย่างเช่น

```
int *p1 = &foo; // 1367;
p1 += 1000; // 2367
p1++;     // 2368

// work with arrays
int a[400];
int *p2 = &a;
p2 += 399;
*p2 = 1234;
```
#

# TERMINAL_IMAGE
![TERMINAL](https://i.imgur.com/WOh7ZVQ.jpg)